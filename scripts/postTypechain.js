/**
 * Post script to rename the default exported factory names by Typechain.
 * Renamed factory names are only used for distribution and should not be used internally.
 */
const fs = require("fs");
const readline = require("readline");

const typechainExportsFile = "src/contracts/index.ts";
const typechainDistExportsFile = "src/contracts/index.dist.ts";
const suffix = "__factory";
const exportsArr = [];

const readInterface = readline.createInterface({
  input: fs.createReadStream(typechainExportsFile),
});

const re = /^export\s*(type)?\s*{\s*(\w+)\s*(?:as.+)?}\s*from\s*"(.*)";$/m;
readInterface.on("line", (line) => {
  const matches = line.match(re);
  if (!matches) return;
  const [, type, modName, path] = matches;
  let asName;
  if (modName.indexOf(suffix) !== -1) {
    const len = modName.length - suffix.length;
    asName = `${modName.substring(0, len)}Factory`;
  }
  exportsArr.push({
    name: modName,
    type: type === "type",
    path,
    asName,
  });
});

readInterface.on("close", () => {
  const headers = [
    "/* Autogenerated file. Do not edit manually. */",
    "/* Do not import from this file. This is only for distribution. */",
    "/* tslint:disable */",
    "/* eslint-disable */",
  ];
  const statements = exportsArr.map(
    ({ name, type, asName, path }) =>
      `export${type ? " type" : ""} { ${name} ${asName ? `as ${asName}` : ""}} from "${path}";`
  );
  if (!statements || !statements.length) return;
  const data = [...headers, ...statements].join("\n");
  fs.writeFileSync(typechainDistExportsFile, data);
  console.log(`Renamed Typechain generated exports and saved as ${typechainDistExportsFile}.`);
});
